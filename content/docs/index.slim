Menu: Docs
Title: Documentation - Image Resizer V3
Libs: -comments
Icon: book


h1 Documentation
h1 style="margin-bottom: 15px; text-align: center;"
  |Welcome to the Docs Page

markdown:
  We're here to tell you literally everything you can ever possibly need to know about our product, ever. Want to know if ImageResizer will work with your toaster? Well, that's not answered, but a lot of other, better questions are, so we're going to leave you hanging on that one.

  See that sidebar on the right? That's there to help categorize all of that everything. If you're brand new to our product, we recommend checking out our [home page](/) to get a general idea of what we do and why we're useful. Afterwards you should probably go to our [download page](/download) and [installation guide](/docs#installation).

  If you're already reasonably familiar with us, you'll find information on [plugins](link), [troubleshooting](link) and [cool ways to use our product](link) all right here.

  Not finding what you're looking for? Try [searching the site](/search).
ruby:
  require 'uri'
  require 'net/http'
  require 'github/markdown'
  require 'nokogiri'
  require 'pry'
   
  def cloneBetweenInner(from_set, target_node, a, b)
    STDERR << "[cbi #{from_set.count}]"
    b = Nokogiri::XML::NodeSet.new(b.first.document,b) unless b.nil? || b.is_a?(Nokogiri::XML::NodeSet)
    b = nil if !b.nil? && b.empty?
   
    b_ancestors =  b.nil? ? nil : Nokogiri::XML::NodeSet.new(b.first.document,b.map{|e| [e] + e.ancestors.to_a}.flatten)
   
    return :a_notfound if !a.nil? && (!from_set.include?(a) && (from_set & a.ancestors).empty?)
   
    from_set.each do |n|
      #@@nodes_visited += 1
   
      return :b_found if !b.nil? && b.include?(n)
   
      a = nil if a == n
   
      if a.nil? || (n.element? && a.ancestors.include?(n))
   
        if !n.element?
          target_node.add_child(n.dup)
        else
          copy = n.document.create_element(n.name, n.attributes)
          target_node.add_child(copy)
        
          result = cloneBetweenInner(n.children, copy, a, b) unless n.children.nil?
   
          if result == :a_found
            a = nil
          end
          if result == :b_found
            return :b_found 
          end
          if result == :a_notfound
            raise "what??"
          end
   
        end
      elsif !n.children.nil? && n.element? && !b_ancestors.nil? && (n.children & b_ancestors).count > 0
        return :b_found
      end
      end
      return :a_found if a.nil?
  end
   
  def cloneBetween(from_set, start_with, end_before_any)
    holder = Nokogiri::HTML::DocumentFragment.new(Nokogiri::HTML::Document.new);
   
    result = cloneBetweenInner(from_set,holder, start_with,end_before_any)
   
    STDERR << result
    raise ArgumentError.new("start_with was not found in from_set") if result == :a_notfound 
    holder
  end
   
   
  uri = URI('https://raw.githubusercontent.com/imazen/resizer/master/readme.md')
  text = Net::HTTP.get(uri).encode('utf-8','UTF-8');
  html = GitHub::Markdown.render_gfm(text);
  doc = Nokogiri::HTML::fragment(html);
   
  start_at = doc.css("a[name='installation']").first
  end_at = doc.css("a[name='troubleshooting_guide']")
   
  content = cloneBetween(doc.children,start_at,end_at)


   
== content.to_html
   